#!/usr/bin/python
# I am not sure about the offsets I am guessing this is what the spec
import sys, string, locale, getopt,csv
import os.path, math 
from collections import defaultdict

def main():
    contains_errors=False;
    block_start=0
    block_cap = 0;

#modified===changed lists to sets and dicts to make them a bit more scalable
    reserved_blocks = set() 
    blocks_referenced = defaultdict(lambda: 0, {})
    free_blocks = set()
    allocated_inodes = set()
    free_inodes = set()
    first_inode = 2
    last_inode = 0

    reserved_blocks.add("1")
    blocks_referenced[0]=1;
    blocks_referenced[1]=1;
    blocks_referenced[2]=1;#adding 2 is a bit hard coded but I suppose it'll work for this lab

#modified===added variable contains_errors to apply exit codes 0 and 2

    if len(sys.argv) == 2:
        filename = sys.argv[1]
        if not os.path.isfile(filename):
            sys.exit("Error: file " + filename + " does not exist.")
    else:
        sys.exit("Error: program requires a file as argument.")

   
    with open(filename,"r") as csv_file:
        entries = csv.reader(csv_file)

#modified===added additional blocks into reserved blocks
        num_inodes_per_block = -1;
        for fields in entries:
            if(fields[0]=="SUPERBLOCK"):
                first_inode = int(fields[7])
                block_cap = int(fields[1])
                last_inode = int(fields[2])
                inode_size = int(fields[4])
                block_size= int(fields[3])
                num_inodes_per_block=block_size/inode_size;
                #should never get here unless super block info is wrong 
                #protect against division by 0
                if(num_inodes_per_block==0):
                    num_inodes_per_block=1;

   
            if(fields[0]=="GROUP"):
                num_inodes_in_group=int(fields[3])
                inode_blocks=int(math.ceil(num_inodes_in_group/num_inodes_per_block))
                inode_blocks_start=int(fields[8])
                reserved_blocks_start=int(fields[6])
                for x in range (reserved_blocks_start, inode_blocks_start+inode_blocks):
                    reserved_blocks.add(str(x))
                    blocks_referenced[int(x)]=1

            if(fields[0]=="BFREE"):
                b_no = int(fields[1])
                if (b_no!=0):
                    blocks_referenced[int(fields[1])]+=1
                    free_blocks.add(b_no)
            if(fields[0]=="INDIRECT"):
                b_no = int(fields[5])
                if (b_no!=0):
                    blocks_referenced[b_no]+=1
            if(fields[0]=="INODE"):
                y = 0
                if(fields[2]!="?"):
                    b_no = int(fields[1])
                    allocated_inodes.add(b_no)
                while(y<15):
                    b_no = int(fields[12+y])
                    if (b_no!=0):
                        if b_no in free_blocks:
                            print "ALLOCATED BLOCK " + fields[12+y] + " ON FREELIST"
                            contains_errors=True
                        else:
#modified===================changed from always append to only append if not on already in blocks_referenced.
                            #according to sanity test, program is not suppose to generate the duplicate error
                            #in cases where the allocated block is also on the freelist
                            blocks_referenced[b_no]+=1
                    y = y + 1
            if(fields[0]=="IFREE"):
                b_no = int(fields[1])
                free_inodes.add(b_no)
                    
        #print block_cap
        #print blocks_referenced.count(8)
        it = 0
        while(it < block_cap-1):
            if it not in blocks_referenced:
                print "UNREFERENCED BLOCK " + str(it) 
                contains_errors=True
            it = it + 1
        it = first_inode
#modified===commented out line below lol
        #print first_inode

        while ( it < last_inode ):
            if it not in allocated_inodes:
                if it not in free_inodes:
                    print "UNALLOCATED INODE " + str(it) + " NOT ON FREELIST"
                    contains_errors=True
            if it in free_inodes:
                if it in allocated_inodes:
                    print "ALLOCATED INODE " + str(it) + " ON FREELIST"
                    contains_errors=True
            it = it + 1

        for inode in allocated_inodes:
            if inode in free_inodes:
                print "ALLOCATED INODE " + str(inode) + " ON FREELIST"
                contains_errors=True
    
    with open(filename,"r") as csv_file:
        entries = csv.reader(csv_file)
        for fields in entries:
            #print fields
            if(fields[0]=="INODE"):
                x = 0
                while(x<15):
                    if(int(fields[12+x])==0):
                        #unallocated
                        x += 1
                        continue;
#modified===========I'm gonna misspell triple because the specs say so
                    #changed > block_cap to >=block_cap
                    if(int(fields[12+x])>=block_cap or int(fields[12+x])<0):
                        contains_errors=True
                        if(x==12):
                            print "INVALID INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 12"
                        elif (x==13):
                            print "INVALID DOUBLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 268"
                        elif (x==14):
                            print "INVALID TRIPPLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 65804"
                        else:
                            print "INVALID BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET " + str(x)
#modified===========changed if to elif since according to specs a reserved block error should not
                    #accompany a duplicate error
                    elif fields[12+x] in reserved_blocks:
                        contains_errors=True
                        if(x==12):
                            print "RESERVED INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 12"
                        elif (x==13):
                            print "RESERVED DOUBLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 268"
                        elif (x==14):
                            print "RESERVED TRIPPLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 65804"
                        else:
                            print "RESERVED BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET " + str(x)
                    elif (blocks_referenced[int(fields[12+x])]>1):
                        contains_errors=True
                        if(x==12):
                            print "DUPLICATE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 12"
                        elif(x==13):
                            print "DUPLICATE DOUBLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 268"
                        elif(x==14):
                            print "DUPLICATE TRIPPLE INDIRECT BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET 65804"
                        else:
                            print "DUPLICATE BLOCK " + fields[12+x] + " IN INODE " + fields[1] + " AT OFFSET " + str(x)
                    x = x + 1
   
##############################
#Directory Consistency Audits#
##############################
    with open(filename,"r") as csv_file:
        csv_entries = csv.reader(csv_file)
       

        #convert to array bc personal preference
        entries=[]
        for entry in csv_entries:
            entries.append(entry);

        """
        check that each allocated I-node should be referred to by the a number of directory 
        entries that is equal to the reference count recorded in the I-node
        """
        #create dictionary of inode num to link count
        inode_num_to_link_count_dict={}
        for fields in entries:
            if(fields[0]=="DIRENT"):
                referenced_file_inode_num=fields[3];
                if referenced_file_inode_num in inode_num_to_link_count_dict:
                    inode_num_to_link_count_dict[referenced_file_inode_num]+=1;
                else:
                    inode_num_to_link_count_dict[referenced_file_inode_num]=1;
        for fields in entries:
            if(fields[0]=="INODE"):
                inode_num=fields[1];
                link_count_stored_in_inode=fields[6];
                link_count_based_on_dirents='0';
                if(inode_num in inode_num_to_link_count_dict):
                    link_count_based_on_dirents=str(inode_num_to_link_count_dict[inode_num]);
                if link_count_based_on_dirents != link_count_stored_in_inode:
                    print "INODE " + inode_num + " HAS " + link_count_based_on_dirents + " LINKS BUT LINKCOUNT IS " + link_count_stored_in_inode
                    contains_errors=True
             
        """
        Check that directory entries should only refer to valid and allocated I-nodes. 
        While scanning the directory entries, check the validity and allocation status of each referenced I-node. 
        """

        #create set of allocated inodes
        allocated_inode_nums=set();
        for fields in entries:
            if(fields[0]=="INODE"):
                inode_num=fields[1];
                if(fields[2]!="?"):
                    allocated_inode_nums.add(inode_num);
        #valid inodes are from 2 to the total number of inodes aka last_inode
        first_valid_inode=2; # not 1, right?
        for fields in entries:
            if(fields[0]=="DIRENT"):
                parent_inode_num=fields[1];
                referenced_file_inode_num=fields[3];
                direct_entry_name=fields[6];
                if int(referenced_file_inode_num) < first_valid_inode or int(referenced_file_inode_num) > last_inode:
                    print "DIRECTORY INODE "+parent_inode_num +" NAME " +direct_entry_name+ " INVALID INODE "+referenced_file_inode_num
                    contains_errors=True
                elif referenced_file_inode_num not in allocated_inode_nums:
                    print "DIRECTORY INODE "+parent_inode_num +" NAME " +direct_entry_name+ " UNALLOCATED INODE "+referenced_file_inode_num
                    contains_errors=True
        """
        Check that each directory begins with two links, 
        one to itself (.) and one to its parent (..). 
        While scanning each directory, check for the validity of these two links and, 
        for each detected inconsistency, a message like one of the following should be generated to stdout:
        collect list of directories
        """
        directory_inode_nums=set()
        for fields in entries:
            if(fields[0]=="INODE" and fields[2]=='d'):
                directory_inode_num=fields[1]
                directory_inode_nums.add(directory_inode_num);

        #map child to parent according to dirent entries
        child_to_parent_dict={}
        child_to_parent_dict['2']='2'; #root's parent is always root
        for fields in entries:
            if(fields[0]=="DIRENT"):
                parent_inode_num=fields[1];
                referenced_file_inode_num=fields[3];
                direct_entry_name=fields[6];
                if(referenced_file_inode_num not in directory_inode_nums):
                    #not a directory
                    continue;
                elif(direct_entry_name == "'.'" or direct_entry_name=="'..'"):
                    #not a child directory
                    continue;
                else:
                    child_to_parent_dict[referenced_file_inode_num]=parent_inode_num;
        
        directory_entry_check_status={}
        for d in directory_inode_nums:
            directory_entry_check_status[d]=3;
        #check directories
        for fields in entries:
            if(fields[0]=="DIRENT"):
                parent_inode_num=fields[1];
                referenced_file_inode_num=fields[3];
                direct_entry_name=fields[6];
                if (parent_inode_num not in directory_entry_check_status):
                    continue;
                check_status=directory_entry_check_status[parent_inode_num];
                if(direct_entry_name == "'.'"):
                    if(not check_status&1):
                        directory_entry_check_status[parent_inode_num]=-1;
                    else:
                        directory_entry_check_status[parent_inode_num]-=1;
                    if(referenced_file_inode_num != parent_inode_num):
                        print "DIRECTORY INODE "+parent_inode_num+" NAME '.' LINK TO INODE "+referenced_file_inode_num+" SHOULD BE "+parent_inode_num
                        contains_errors=True
                    
                elif(direct_entry_name=="'..'"):
                    if(not check_status&2):
                        directory_entry_check_status[parent_inode_num]=-1;
                    else:
                        directory_entry_check_status[parent_inode_num]-=2;
                    if(child_to_parent_dict[parent_inode_num] != referenced_file_inode_num):
                        print "DIRECTORY INODE "+parent_inode_num+" NAME '..' LINK TO INODE "+referenced_file_inode_num+" SHOULD BE "+child_to_parent_dict[parent_inode_num] 
                        contains_errors=True
        #check that all hit
        #not called for by specs so even though it's a useful check, imma comment it out
        #for key in directory_entry_check_status:
            #if(directory_entry_check_status[key]!=0):
                #print "DIRECTORY INODE "+str(key)+" HAS EITHER TOO MANY OR TOO FEW '.' OR '..' ENTRIES"
        if(contains_errors):
            sys.exit(2);
        else:
            sys.exit(0);



if __name__ == "__main__":
    main()
